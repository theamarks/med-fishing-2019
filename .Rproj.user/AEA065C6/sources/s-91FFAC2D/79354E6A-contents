# NOOC (Native Olympia Oyster Collaborative) Restoration Survey Mancuscript
# Authors - April Ridlon, Kerstin Wasson, Althea Marks
# Email - ctenophores@gmail.com, kerstin.wasson@gmail.com, theamarks@gmail.com
# Project period - Fall 2018 - Spring 2020

## Cost of Restoration projects by state
## Figure for NOOC Restoration Manuscript 


################################################
## Thea's rework of Cost of Restoration projects by state


# Setup Code --------------------------------------------------------------
################################################
library(ggplot2) # graphing package
library(ggpubr) # package with theme_classic2()
library(dplyr) # package part of the tidyverse series - rearrange data
library(tidyr) # package that contains drop_na() function - drop rows containing NA - clean up data.frame
library(ggpmisc) # package for adding line equation and R^2 to plots -AM
library(viridis) # color blind & visually appealing color pallates -AM
library(scales) # change formatting of graph scales -AM
library(gridExtra) # combine multiple graphs into one figure

# read in data
Cost <- read.csv("OlyRest_Cost.csv") 
################ Problem with this data ##########
# SF Living Shorelines original_cost data missing from csv... Numbers weren't formatted the same. Fixed in original .csv 

# assign simple linear equation to obejct
x_y_formula <- y ~ x

# order states North to South
order_by_state <- c("BC", "WA", "OR", "CA") 

# generate color palet in Viridis 
show_col(plasma(4))

# Update dataframe - change State to factor with 4 levels ordered by previous code line
Cost <- dplyr::arrange(transform(Cost, State = factor(State,levels = order_by_state)), State)

# removes all empty/NA rows not corresponding with Project ID - leftovers from excel
Cost <- Cost %>% 
  drop_na(Project.ID) 

# Not needed - data fixed in "OlyRest_Cost.csv"
# Convert Cost_original from factor to number variable
# Cost$Cost_original <- as.numeric(levels(Cost$Cost_original)[Cost$Cost_original])

# Add restoration and monitoring costs together for total cost for this project survey response
Cost[6,"Cost_original"] <- 38900 + 111000 

# Update Cost/Area calculations in data.frame
Cost <- Cost %>%
  filter(!Project.ID == 38) %>% # remove Tiburon Project - No monitoring data - exclude from analysis (DZ)
  mutate(CostPerArea = Cost_original / Area,
         Percent_Monitor = (Cost_monitoring / Cost_original),
         Log_CostPerArea = log10(CostPerArea))
#################################################################################

# Danielle Zacherl & Thea Figures -----------------------------------------

#1) X=log area, y = Log cost per area (but please indicate for both axes the units, so is area acreage?)

#2) X = % budget spent on monitoring, y = log cost per area (again units)
      # polynomial (order 2) regression line through Fig 2

#################################################################################
# x = log area, y = log cost per area --------------------------------------
# Danielle and Althea

# Linear Regression
LM_LogArea_LogCostArea <- lm(Cost$Log_CostPerArea ~ Cost$LogArea)
summary(LM_LogArea_LogCostArea)
# diagnostic plots
par(mfrow=c(2,2)) 
plot(LM_LogArea_LogCostArea)

#logy_logx_formula <- log10(y) ~ log10(x)
y_x_formula <- y ~ x

### Version 2 - Adjusting graph so axes numbers are untransformed. relationship between variables more clear (AM- 20202/8/11)
# Second draft of manuscript to be submitted to Coasts and Estuaries

LogArea_LogCostArea_RegAxes <- ggplot(data = Cost, aes(x = Area, y = CostPerArea)) + 
   scale_y_continuous(trans = 'log10', 
                      label = label_comma(accuracy = 1),
                      limits = c(1,3800)) +
   scale_x_continuous(trans = 'log10', 
                      label = label_comma(accuracy = 1),
                      limits = c(1,72900),
                      breaks = c(1, 10, 100, 1000, 10000, 100000)) +
   #scale_x_log10(label = label_comma()) +
   annotation_logticks() +
   geom_smooth(method = lm, color = 'grey30', se = T) + # fit linear model to data, default 95% CI
   geom_point(size = 3, shape = 21, color = "black", aes(fill = State)) + # plot data points, separate State by color
   theme_classic2(base_size = 16) +  # formatting theme
   theme(text = element_text(family = "sans", color = "black")) +  # set text to sans serif / Arial)
   guides(fill=FALSE) +
   scale_fill_viridis(discrete = TRUE, option = "plasma", na.value = "black") +
   coord_fixed(ratio = 1) + # fix axes ratio
   labs(title = "B",
         x = expression("Project area (m"^2*")"),
        y = expression("Cost per area (USD/m"^2*")")) +  # axis labels
   ggpmisc::stat_poly_eq(aes(label = paste("atop(",..eq.label.., ",",..rr.label.., ")", sep ="")),
                         formula = y_x_formula,
                         eq.x.rhs = (paste0(expression("log"[10]), " (x)")), 
                         eq.with.lhs = (paste0(expression("log"[10]), " (y) ==")),
                         parse = TRUE,
                         label.x = "left",
                         label.y = "bottom")

LogArea_LogCostArea_RegAxes

# save figure to project folder. change file type by editing file name
 ggsave(LogArea_LogCostArea_RegAxes, 
       filename = "NOOC_LogArea_LogCostArea_RegAxes_CI.jpg",
      # height = 6,
       width = 6,
       #scale = 1,
       dpi = 400, # Dots per inch (Science Journal min 300 dpi)
       units = c("in")) # units to measure figure

#################################################################################
# x = % budget monitoring, y = log cost per area --------------------------
# Danielle and Althea

### Version 2 - Adjusting graph so axes numbers are untransformed. relationship between variables more clear (AM- 20202/8/11)
# Second draft of manuscript to be submitted to Coasts and Estuaries 

##### Polynomial order 2 formula
Poly2_formula <- y ~ poly(x, 2, raw = TRUE)


test_poly = lm(CostPerArea ~ poly(Percent_Monitor, 2, raw = TRUE), data = Cost)
summary(test_poly)

test_poly_log = lm(log10(CostPerArea) ~ poly(Percent_Monitor, 2, raw = TRUE), data = Cost)
summary(test_poly_log)

# Graph 
PrctBudMontr_LogCostArea_RegAxes <- ggplot(data = Cost, aes(x = Percent_Monitor, y = CostPerArea)) + 
   scale_y_continuous( trans = 'log10', 
                      label = label_comma(accuracy = 1),
                      limits = c(1,3800)) +
   scale_x_continuous(labels = percent) +
   annotation_logticks(sides = "l") +
   geom_smooth(method = lm, formula = Poly2_formula, color = 'grey30', se = T) + # fit model to data, default 95% CI
   geom_point(size = 3, shape = 21, color = "black", aes(fill = State)) + # plot data points, separate State by color
   theme_classic2(base_size = 16) + # formatting theme
   theme(text = element_text(family = "sans", color = "black")) + # set text to sans serif / Arial)
   scale_fill_viridis(discrete = TRUE, option = "plasma", na.value = "black") +
   coord_fixed(ratio = .2) + # fix axes ratio
   labs( title = "C",
         fill="State / \nProvince",
         x = "Percent of budget spent on monitoring",
         y = expression("Cost per area (USD/m"^2*")")) + # axis labels
   guides(fill = F) +
   # function to label plots with R^2 and line equations. atop() creates two lines in label -AM
   ggpmisc::stat_poly_eq(aes(label = paste("atop(",..eq.label.., ",",..rr.label.., ")", sep ="")),
                      formula = Poly2_formula,
                      eq.with.lhs = (paste0(expression("log"[10])," (y) ==")),
                      parse = TRUE,
                      label.x = "right",
                      label.y = "bottom")

PrctBudMontr_LogCostArea_RegAxes

### Save figure to R project 
ggsave(PrctBudMontr_LogCostArea_RegAxes, 
       filename = "NOOC_PrctBudMontr_LogCostArea_RegAxes_CI.jpg",
       #height = 4, 
       width = 6,
       #device = "png",
       #scale = 0.618,
       dpi = 400, # Dots per inch (Science Journal min 300 dpi)
       units = "in") # units to measure figure

########## Extrat legend from scatter plots
# Dumbie graph for legend
State_legend_graph <- ggplot(data = Cost, aes(Area, CostPerArea)) +
   geom_point(size = 3, shape = 21, color = "black", aes(fill = State)) +
   scale_fill_viridis(discrete = TRUE, option = "plasma", na.value = "black") +
   theme_classic2() +
   labs(fill="State /\nProvince")

# extract legend
State_legend <- get_legend(State_legend_graph)


######################## Kerstin's Figure 2A panel  #################
##### Total Project Costs by state and year groups  ###############

#Total_Cost <- read.csv("Cost_by_State_Fig2_Thea.csv") 
# Checked the numbers in this file with original survey numbers, could not get them to 
# match up. Used original survey years and corrected in "OlyRest_Cost.csv"

Total_Cost_2 <- Cost %>% 
   na.omit(Cost_original) %>% 
   mutate(Cost_x1000 = round(Cost_original/1000,0)) %>% 
   group_by(State, Year_bin) %>% 
   dplyr::summarise(total_cost_x1000 = sum(Cost_x1000),
                    N = n())

# save to manually fill out all year bins in excel that don't have data for better graph.
# I know this isn't proper, but fastest
# route for me to complete manuscript edits. 
#write.csv(Total_Cost_2, "Total_Cost_Year_Bin_Thea.csv")

Total_Cost_3 <- read.csv("Total_Cost_Year_Bin_Thea_edited.csv")

Total_Cost_3 <- dplyr::arrange(transform(Total_Cost_3, State = factor(State,levels = order_by_state)), State)

Total_cost_fig <- ggplot(data = Total_Cost_3, 
                         aes(Year_bin, total_cost_x1000, fill = State)) +
   geom_bar(color = "black",
            position = position_dodge(width = .9), 
            stat="identity") +
   scale_fill_viridis(discrete = TRUE, 
                      option = "plasma", 
                      na.value = "black",
                      guide = guide_legend(
                         direction = "horizontal",
                         title.position = "top")) +
   theme_classic2(base_size = 16) +
   coord_fixed(ratio = .0003) + # fix axes ratio
   scale_y_continuous(breaks = c(0,500,1000, 1500, 2000, 2500, 3000),
                      labels = c("$0","$500","$1,000", "$1,500", "$2,000", "$2,500", "$3,000")) +
   labs(title = "A",
        x = '',
        y = "Cost of all projects (USD x 1000)",
        fill = "State / Province") +
   theme(legend.justification = c(1, 1),
         legend.direction = "horizontal",
         legend.position = c(1, 1),
         panel.grid.major.y = element_line(colour="gray90", size=0.5)) +
   geom_text(position = position_dodge(width = .9),
             aes(label = N,
             y = total_cost_x1000 + 200))
   
Total_cost_fig

ggsave(Total_cost_fig, 
       filename = "Total_cost_State_year_range.jpg",
       #height = 4, 
       width = 12,
       #device = "png",
       #scale = 0.618,
       dpi = 400, # Dots per inch (Science Journal min 300 dpi)
       units = "in") # units to measure figure

####### Combine Cost analysis panels into single figure

# make multipframe figure
Combo_Fig2 <- grid.arrange(Total_cost_fig,
                           LogArea_LogCostArea_RegAxes, 
                           PrctBudMontr_LogCostArea_RegAxes, 
                         #  widths = c(2,2),
                           layout_matrix = rbind(c(1,1),
                                                 c(2,3)),
                           widths = c(3,3),
                           heights = c(3,3))

ggsave(Combo_Fig2,
       filename = "Cost_Area_budget_combo_Figure.jpg",
       width = 9, # individal graph widths are 6,
       height = 7.25,
       scale = 1.25,
       dpi = 400,
       units = "in")

###############################################################################
# Log Area X Cost per Area - facet --------------------------------
#facet by state - Drop NAs in CostPerArea

(Cost_graph_facet <- ggplot(Cost %>% drop_na(CostPerArea), aes(x = LogArea, y = CostPerArea)) + 
    geom_smooth(method = lm, color = 'grey30') + # fit linear model to data
    geom_point(width = .2, height=.2, size = 2, aes(color = State)) + # plot data points, separate State by color
    theme(text = element_text(size = 12, family = "sans", color = "black")) + # set text to sans serif / Arial)
    facet_grid(~State) +
    ## Remove -2000 on y-axis, doesn't make sense for cost/area to be negative.
    ylim(0, max(Cost$CostPerArea)) +
    scale_color_viridis(discrete = TRUE, option = "plasma", na.value = "black") +
    labs(x = expression("Log"[10]*" area (m"^2*")"),
         y = expression("Cost per area (USD/m"^2*")")) + # axis labels
    theme_classic2() + # formatting theme
    # function to label plots with R^2 and line equations. atop() creates two lines in label -AM
    ggpmisc::stat_poly_eq(aes(label = paste("atop(",..eq.label.., ",",..adj.rr.label.., ")", sep ="")),
                          formula = x_y_formula, # formula to use, assigned to oject above
                          size = 2,
                          parse = TRUE,
                          label.x = 'right')
)

### Save figure to R project 
ggsave(filename = "NOOC_Cost_per_Area_LogArea.pdf",
       width = (6.5), # width in inches
       height = 2, # height in inches
       dpi = 400, # Dots per inch (Science Journal min 300 dpi)
       units = c("in")) # units to measure figure

# Linear Regression analysis 
LogArea_CostArea_LM <- lm(data = Cost, CostPerArea ~ LogArea) # linear model (y ~ x)
summary(LogArea_CostArea_LM) # Quick stats
par(mfrow=c(2,2)) # diagnostic plots
plot(LogArea_CostArea_LM)

#######################################################################################
# Log Cost per Area X Log Area - Single plot ----------------------------

(CostPerArea_graph_1_plot <- ggplot(Cost, aes(x = log10(Area), y = log10(CostPerArea))) + 
   geom_smooth(method = lm, color = 'grey30') + # fit linear model to data
   geom_point(width = .2, height=.2, size = 3, aes(color = State)) + # plot data points, separate State by color
   theme(text = element_text(size = 20, family = "sans", color = "black")) + # set text to sans serif / Arial)
   scale_color_viridis(discrete = TRUE, option = "plasma", na.value = "black") +
   labs(x = expression("Log"[10]*" area"), y = expression("Log"[10]*" Cost per area")) + # axis labels
   theme_classic2() + # formatting theme
   # function to label plots with R^2 and line equations. atop() creates two lines in label -AM
   ggpmisc::stat_poly_eq(aes(label = paste("atop(",..eq.label.., ",",..adj.rr.label.., ")", sep ="")),
                         formula = x_y_formula, # formula to use, assigned to oject above
                        # size = 5,
                         parse = TRUE,
                         label.x = 'right')
)

# Save figure to R project 
ggsave(filename = "NOOC_LogCostPerArea_LogArea_1plot.pdf",
       #width = (6.5), # width in inches
      # height = 2, # height in inches
       dpi = 400, # Dots per inch (Science Journal min 300 dpi)
       units = c("in")) # units to measure figure

#######################################################################################
# Cost VS Area - Single plot ----------------------------------------------

(Cost_Area_graph_1_plot <- ggplot(Cost, 
                                  aes(x = Area, y = Cost_original)) + 
   geom_smooth(method = lm, color = 'grey30') + # fit linear model to data
   geom_point(width = .2, height=.2, size = 3, aes(color = State)) + # plot data points, separate State by color
   theme(text = element_text(size = 20, family = "sans", color = "black")) + # set text to sans serif / Arial)
   scale_color_viridis(discrete = TRUE, option = "plasma", na.value = "black") +
   labs(x = "Area", y = "Orignial Cost") + # axis labels
   theme_classic2() + # formatting theme
   annotate("text", label = "SF Living Shorelines not included - Data missing from csv", x = 30000, y = 1000000) +
   # function to label plots with R^2 and line equations. atop() creates two lines in label -AM
   ggpmisc::stat_poly_eq(aes(label = paste("atop(",..eq.label.., ",",..adj.rr.label.., ")", sep ="")),
                         formula = x_y_formula, # formula to use, assigned to oject above
                         # size = 5,
                         parse = TRUE,
                         label.x = 'right')
)
### Save figure to R project 
ggsave(filename = "NOOC_LogCostPerArea_LogArea_1plot.pdf",
       #width = (6.5), # width in inches
       # height = 2, # height in inches
       dpi = 400, # Dots per inch (Science Journal min 300 dpi)
       units = c("in")) # units to measure figure


###############################################
# Project Area Vs Cost Per Area



#######################################################################################
# Kerstin and April's code  -----------------------------------------------
# (Not used in final figures, Althea reworked above)

library(ggplot2)
library (ggthemes)
library(ggpubr)

Cost <- read.csv("OlyRest_Cost.csv") 

ggscatter(Cost, x = "LogArea", y = "CostPerArea", color = "State", add="reg.line", palette = "jco")+
  stat_cor(aes(color = State))           # Add correlation coefficient

##April's re-do of the above figure
library(usethis)
library(ggpmisc) # package for adding line equation and R^2 to plots -AM
library(viridis) # color blind & visually appealing color pallates -AM
library(olsrr) # regression package - nice table output

Cost <- read.csv("OlyRest_Cost.csv") 

# From final Oyster Fig code - () around whole code automatically renders plot
(Cost_graph_facet <- ggplot(Cost, aes(x = LogArea, y = CostPerArea)) + 
    geom_smooth(method = lm, color = 'grey30') + # fit linear model to data
    geom_jitter(width = .2, height=.2, size = 2, aes(color = State)) +
    scale_color_viridis(discrete = TRUE, option = "plasma") +
    labs(x = "Log Area", y = "Cost per Area") +
    theme_classic2() +
    theme(legend.position="none") + # remove legend
    # function to label plots with R^2 and line equations. atop() creates two lines in label -AM
    ggpmisc::stat_poly_eq(aes(label = paste("atop(",..eq.label.., ",",..adj.rr.label.., ")", sep ="")),
                          formula = x_y_formula,
                          parse = TRUE))